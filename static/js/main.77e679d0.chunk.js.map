{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","username","email","className","src","width","height","alt","CardList","robots","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","ErrorBoundary","state","hasError","error","info","this","Fragment","React","Component","App","fetch","then","response","json","users","setState","searchField","onSearchChange","filteredRobots","filter","toLowerCase","includes","length","connect","dispatch","event","text","target","value","payload","setSearchField","Boolean","window","location","hostname","match","initialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sRAgBeA,EAdF,SAAC,GAAD,EAAGC,GAAH,QAAWC,YAAX,MAAkB,SAAlB,OAA4BC,SAA5B,EAAsDC,cAAtD,MAA8D,UAA9D,SACX,yBAAKC,UAAU,oDACb,yBAAKC,IAAG,+BAA0BJ,GAChCK,MAAM,MACNC,OAAO,MACPC,IAAI,WAEN,6BACE,4BAAKP,GACL,2BAAIE,MCUKM,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEEA,EAAOC,KAAI,SAACC,EAAOZ,GAAR,OACT,kBAAC,EAAD,CACEa,IAAKb,EACLA,GAAIY,EAAMZ,GACVE,SAAUU,EAAMV,SAChBD,KAAMW,EAAMX,KACZE,MAAOS,EAAMT,aCARW,G,MAXG,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OAChB,yBAAKX,UAAU,OACb,2BACEA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCADI,EANA,SAACC,GAAD,OACb,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAoBhB,OAAQ,UACnEa,EAAMI,WCyBIC,E,kDA1Bb,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IACDM,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKJ,MAAM,CAAEC,UAAU,M,+BAIvB,OAAIG,KAAKJ,MAAMC,SAEX,sDAIA,kBAAC,IAAMI,SAAP,KACGD,KAAKV,MAAMI,c,GApBMQ,IAAMC,WCmB5BC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKR,MAAQ,CACXhB,OAAQ,IAHE,E,gEAOO,IAAD,OAElByB,MAAM,8CACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GAEL,EAAKC,SAAS,CAAE9B,OAAQ6B,S,+BAUpB,IACA7B,EAAWoB,KAAKJ,MAAhBhB,OADD,EAE+BoB,KAAKV,MAApCqB,EAFA,EAEAA,YAAaC,EAFb,EAEaA,eAEdC,EAAiBjC,EAAOkC,QAAO,SAAChC,GACpC,OAAOA,EAAMX,KAAK4C,cACfC,SAASL,EAAYI,kBAG1B,OAAKnC,EAAOqC,OAMR,yBAAK3C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAc2B,IACzB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUhC,OAAQiC,OATxB,2C,GArCUX,IAAMC,WAwDTe,eAnES,SAACtB,GAAD,MAAY,CAClCe,YAAaf,EAAMe,gBAGM,SAACQ,GAAD,MAAe,CACxCP,eAAgB,SAACQ,GACf,IAAMC,EAAOD,EAAME,OAAOC,MAC1BJ,ECf0B,SAACE,GAAD,MAAW,CACvCnC,KCHiC,sBDIjCsC,QAASH,GDaEI,CAAeJ,QA4DbH,CAA6Cd,GGjExCsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YChBAC,EAAe,CACnBpB,YAAa,ICOTqB,G,MAAQC,aDJc,WAAwC,IAAvCrC,EAAsC,uDAA9BmC,EAAcG,EAAgB,uDAAP,GAE1D,OAAQA,EAAOhD,MACb,IFT+B,sBEU7B,OAAO,eAAKU,EAAZ,CAAmBe,YAAauB,EAAOV,UACzC,QACE,OAAO5B,OCAbuC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/C,GACLgD,QAAQhD,MAAMA,EAAMiD,c","file":"static/js/main.77e679d0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ( {id = 0, name = \"Random\", username = \"randomeuser\", email = \"noemail\"}) => (\r\n  <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n    <img src={`https://robohash.org/${name}`} \r\n      width=\"150\"\r\n      height=\"150\"\r\n      alt=\"Robots\" \r\n    />\r\n    <div>\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n    {\r\n      robots.map((robot, id) => (\r\n        <Card \r\n          key={id}\r\n          id={robot.id}\r\n          username={robot.username}\r\n          name={robot.name}\r\n          email={robot.email}\r\n        />\r\n      ))\r\n    }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst SearchBox = ({ searchChange }) => (\r\n  <div className=\"pa2\">\r\n    <input\r\n      className=\"pa3 ba b--green bg-lightest-blue\"\r\n      type=\"search\"\r\n      placeholder=\"search robots\"\r\n      onChange={searchChange}\r\n    />\r\n  </div>\r\n)\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\nconst Scroll = (props) => (\r\n  <div style={{overflowY: 'scroll', border: '1px solid black' , height: '720px'}}>\r\n    {props.children}\r\n  </div>\r\n)\r\n\r\nexport default Scroll","import React from 'react'\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.state({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <h1>Oops! that is not good</h1>\r\n      )\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          {this.props.children}\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport CardList from '../components/CardList'\r\nimport './App.css'\r\n// import { robots } from './robots'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport { setSearchField } from '../actions'\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchField: state.searchField\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSearchChange: (event) => {\r\n    const text = event.target.value\r\n    dispatch(setSearchField(text))\r\n  }\r\n})\r\n\r\nclass App extends React.Component { \r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots: [] //, searchfield: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // console.log(this.props.store.getState());\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then((response) => {\r\n        return response.json()\r\n      })\r\n      .then((users) => { \r\n        // console.log(users);       \r\n        this.setState({ robots: users })\r\n      })\r\n  }\r\n\r\n  // onSearchChange = (event) => { \r\n  //   this.setState({\r\n  //     searchfield: event.target.value\r\n  //   })\r\n  // }\r\n\r\n  render() {\r\n    const { robots } = this.state\r\n    const {searchField, onSearchChange} = this.props\r\n\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase()   \r\n        .includes(searchField.toLowerCase())\r\n    })\r\n\r\n    if (!robots.length) {\r\n      return (\r\n        <h1>Loading</h1>\r\n      )\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">RoboFriends</h1>\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList robots={filteredRobots}/>\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import { CHANGE_SEARCH_FIELD } from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from './constants'\r\n\r\nconst initialState = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n  // console.log(action.type);\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload }\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots } from './reducers'\nimport 'tachyons'\n\nconst store = createStore(searchRobots)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}